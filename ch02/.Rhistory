x <- c(1,2,4)
x
y = c(1,2,4)
y
q <- c(x,x,8)
q
x[3]
x[0]
x[1]
x[2:3]
mean(x)
sd(x)
y <- mean(x)
y
data()
data(Nile)
mean(Nile)
sd(Nile)
hist(Nile)
hist(Nile, breaks=12)
hist(Nile, breaks=12)
hist(Nile, breaks=12)
hist(Nile)
oddcount <- function(x) {
  k <- 0 # assign 0 to k
  for (n in x) {
    if (n %% 2 == 1) k <- k+1 # %%는 모듈로 연산자임
  }
  return(k)
}
oddcount(c(1,3,5))
oddcount(c(1,2,3,7,9))
Nile
38 %% 7
for (n in x) {
   if (n %% 2 ==1) k <- k+1
}
X
x
f <- function(x) return (x+y)
y <- 3
f(5)
T
F
x <- c(5,12,13)
length(x)
mode(x)
y <- "abc"
length(y)
mode(y)
z <- c("abc","29 88")
length(z)
mode(z)
u <- paste("abc","de","f")
u
v <- strsplit(u," ")
v
v[1]
v[1][1]
u
v
m <- rbind(c(1,4),c(2,2))
m
m %*% c(1,1)
m[1,2]
m[2,2]
m[2,1]
m[1,]
m[1]
m[2]
m[3]
m[4]
m[1,]
m[,1]
x <- list(u=2, v="abc")
x
x$u
hn <- hist(Nile)
print(hn)
hn
str(hn)
d <- data.frame(list(kids=c("Jack","Jill"),ages=c(12,10)))
d
d$ages
d$kids
print(hn)
summary(hn)
plot(hn)
plot(hn)
examsquiz <- read.table("ExamsQuiz.txt",header=FALSE)
examsquiz <- read.table("ExamsQuiz.txt",header=FALSE)
examsquiz
examsquiz <- read.table("ExamsQuiz.txt",header=t)
examsquiz <- read.table("ExamsQuiz.txt",header=T)
examsquiz <- read.table("ExamsQuiz.txt",header=FALSE)
class(examsquiz)
head(examsquiz)
examsquiz <- read.table("ExamsQuiz.txt",header=T)
head(examsquiz)
examsquiz
examsquiz <- read.table("ExamsQuiz.txt",header=FALSE)
examsquiz
lma <- lm(examsquiz[,2] ~ examsquiz[,1])
lma
examsquiz[,]
examsquiz[,1]
examsquiz[,2]
lma
attributes(lma)
str(lma)
lma$coef
print.lm(lma)
summary(lma)
lmb <- lm(examsquiz[,2] ~ examsquiz[,1] + examsquiz[,3])
getwd()
help(seq)
?seq
example(seq)
example(persp)
help.search("multivariate normal")
getwd()
setwd('../ch02')
getwd()
x <- c(88,5,12,13)
x <- c(x[1:3],168,x[4])
x
x<-c(1,2,4)
length(x)
first1<- function(x) {
   for (i in 1:length(x)) {
      if (x[i] == 1) break # 반복문 밖으로 빠져 나와서 return(i) 실행
   }
   return(i)
}
first1(x)
1:0
x <- c()
x
length(x)
1:length(x)
first1(x)
m
m + 10:13
10:13
y
y[1] <- 5
y
y[2] <-12
y<-vector(length=2)
y
y[1]<-5
y[2]<-12
y<-c(5,12)
y
y<-vector(length=2)
y
y[1]<-5
y
y<-vector(length=2)
y
y[2]<-12
y
x <- c(1,5)
x
x <- "abc"
x
'abc'
x <- 'abc'
x
c(1,2,4) + c(6,0,9,20,22)
x
m
x <- matrix(c(1,4),c(2,5),c(3,6))
x
x <- matrix(c(1,2,3),c(4,5,6))
x
x <- matrix(c(1,2,3))
x
x <- matrix(c(1,2,3), c(4,5,6))
c(4,5,6)
x <- rbind(c(1,4),c(2,5),c(3,6))
x
x+c(1,2)
2+3
"+"(2,3)
x<-c(1,2,4)
x + c(5,0,-1)
x * c(5,0,-1)
x / c(5,4,-1)
x %% c(5,4,-1)
y <- c(1.2,3.9,0.4,0.12)
y
y[c(1,3)]
y[2:3]
v <- 3:4
v
y[v]
x <- c(4,2,17,5)
y <- x[c(1,1,3)]
y
z <- c(5,12,13)
z[-1]
z[-1:-2]
z <- c(5,12,13)
z[1:(length(z)-1)]
z[-(length(z)]
z[-length(z)]
5:8
5:1
i <- 2
1:i-1
1:(i-1)
seq(from=12,to=30,by=3)
seq(from=1.1,to=2,length=10)
seq(from=1.1,to=2,length=15)
X <- C(5,12,13)
x <- c(5,12,13)
x
seq(x)
x <- NULL
x
seq(x)
x <- rep(8,4)
x
rep(c(5,12,13),3)
rep(1:3,2)
rep(c(5,12,13),each=2)
rep(c(5,12,13),each=3)
rep(c(5,12,13),each=4)
rep(c(5,12,13),each=4, 5)
rep(c(5,12,13),5,each=4)
x <- 1:10
any(x > 8)
any(x >88)
all(x>88)
all(x>0)
any(x>8)
findruns <- function(x,k) {
  n <- length(x)
  runs <- NULL
  for (i in 1:(n-k+1)) {
    if (all(x[i:(i+k-1)]==1)) runs <- c(runs,i)
  }
  return(runs)
}
rr = NULL
rr
c(rr, 1)
c(rr, 1, 2)
c(c(rr, 1, 2),5)
y <- c(1,0,0,1,1,1,0,1,1)
findruns(y,3)
findruns(y,2)
findruns(y,6)
findruns(y,1)
findruns1 <- function(x,k) {
  n <- length(x)
  runs <- vector(length=n)
  count <- 0
  for (in in 1:(n-k+1)]==1)) {
preda <- function(x,k) {
  n <- length(x)
  k2<- k/2
  # pred 벡터에 예측값이 들어 있다.
  pred <- vector(length=n-k)
  for (i in 1:(n-k)) {
    if (sum(x[i:(i+(k-1))]) >= k2) pred[i] <- 1 else pred[i] <- 0
  }
  return(mean(abs(pred-x[(k+1):n])))
}
predb <- function(x,k) {
  n <- length(x)
  k2<- k/2
  pred <- vector(length=n-k)
  sm <- sum(x[1:k])
  if (xm >= k2) pred[1] <- 1 else pred[1] <- 0
  if (n-k >= 2) {
    for (i in 2:(n-k)) {
      sm <- sm + [i+k-1] - x[i-1]
y <- c(5,2,-3,8)
cumsum(y)
predc <- function(x,k) {
  n <- length(x)
  k2<- k/2
  # the vector red will contain our predicated values
  pred <- vector(length=n-k)
  csx <- c(0,cumsum(x))
  for (i in l:(n-k)) {
    if (csx[i+k] - csx[i] >= k2) pred[i] <- 1 else pred[i] <- 0
  }
  return(mean(abs(pred-x[(k+1):n])))
}
u <- c(5,2,8)
v <- c(1,3,9)
u > v
w <- function(x) return (x+1)
w(u)
sqrt(1:9)
y <- c(1.2,3.9,0.4)
z <- round(y)
z
round(1.2)
f
f(1:3, 0)
z12 <- function(z) return (c(z,z^2))
z12(5)
z12(1:8)
x <- 1:8
matrix(z12(x),ncol=2)
sapply(1:8,z12)
q()
