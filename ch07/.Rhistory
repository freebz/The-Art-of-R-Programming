x <- c(88,NA,12,168,13)
x
mean(x)
mean(x,na.rm=T)
x <- c(88,NULL,12,168,13)
mean(x)
x <- c(5,NA,12)
na
NA
mode(x[1])
mode(x[2])
y <- c("abc", "def", NA)
mode(y[2])
mode(y[3])
z <- c(NA, NA, NA)
z
mode(c[1])
mode(z[1])
z <- NULL
z
for (i in 1:10) if (i %% 2 == 0) z <- c(z,i)
z
z <- c(5,2,-3,8)
w <- z[z*z > 8]
w
z
z*z > 8
z*z
z
z[c(TRUE, FALSE)]
z[c(TRUE, FALSE, TRUE, TRUE)]
j <- z*z > 8
j
y[j]
z[y]
z
z[j]
y
x
x[x > 3] <- 0
x
x <- c(1,3,8,2,20)
x
x[x > 3]
x[x > 3] <- 0
x
x <- c(6,1:3,NA,12)
x
x[x > 5]
subset(x, x > 5)
which (z * z > 8)
x <- 1:10
x
y <- ifelse(x %% 2 == 0,5,12)
y
x <- c(5,2,9,12)
ifelse(x > 6, 2*x, 3*x)
findud <- function(v) {
  vud <- v[-1] - v[-length(v)]
  return(ifelse(vud > 0,1,-1))
}
udcorr <- function(x,y) {
  ud <- lapply(list(x,y),findud)
  return(mean(ud[[1]] == ud[[2]]))
}
x
y
udcorr(x,y)
X
x
x[1]
x[-1]
x[-2]
x[-4]
x[-5]
x
y
list(x,y)
q()
getwd()
setwd('d:/work/The Art of R Programming/ch05/')
getwd()
head(canman8)
m2cx <- mapsound(canman8,"Man cons","Can cons","x")
m2cx$counts
19.6 * 7
sqrt(137.2)
getwd()
setwd('../ch06')
getwd()
x <- c(5,12,13,12)
xf <- factor(x)
xf
str(xf)
unclass(xf)
length(xf)
x <- c(5,12,13,12)
xff <- factor(x,levels=c(5,12,13,88))
xff
xff[2] <- 88
xff
xff[2] <- 28
xff[2] <- 28
ages <- c(25,26,55,37,21,42)
affils <- c("R","D","D","R","U","D")
tapply(ages,affils,mean)
d <- data.frame(list(gender=c("M","M","F","M","F","F"),
                     age=c(47,59,21,32,33,24),income
                     =c(55000,88000,32450,76500,123000,45650)))
d
d$over25 <- ifelse(d$age > 25,1,0)
d
tapply(d$income,list(d$gender,d$over25),mean)
d
split(d$income,list(d$gender,d$over25))
g <- c("M","F","F","I","M","M","F")
split(1:7,g)
findwords <- function(tf) {
    ## read in the words from the file, into a vector of mode character
    txt <- scan(tf,"")
    words <- split(1:length(txt),txt)
    return(words)
}
aba <- read.csv("abalone.data",header=TRUE)
by(aba,aba$Gender,function(m) lm(m[,2]~m[,3]))
u <- c(22,8,33,6,8,29,-2)
fl <- list(c(5,12,13,12,13,5,13),c("a","bc","a","a","bc","a","a"))
tapply(u,fl,length)
table(fl)
fl
ct <- read.table("ct.dat",header=T)
ct
cttab <- table(ct)
cttab
table(c(5,12,13,12,8,5))
v
v <- read.table("v.dat")
v
v <- read.table("v.dat",header=T)
v
vt <- table(v)
vt
class(cttab)
cttab[1,1]
cttab[1,]
ctt
ctt/5
ctt
ct
ct/5
cttab/5
cttab/5
apply(ctt,1,sum)
apply(cttab,1,sum)
apply(ct,1,sum)
apply(cttab,1,sum)
addmargins(cttab)
dimnames(cttab)
cttab
list(Vote.for.X=c("No","Yes"),Vote.for.X.Last.Time=("No","Yes"))
list(Vote.for.X=c("No","Yes"),Vote.for.X.Last.Time=c("No","Yes"))
subtable(cttab,list(Vote.for.X=c("No","Yes"),
                    Vote.for.X.Last.Time=c("No","Yes")))
subtable
unclass(cttab)
cttab
list(cttab)
list(unclass(cttab))
subtable <- function(tbl,subnames) {
    ## tbl의 셀 수를 가진 배열을 만든다.
    tblarray <- unclass(tbl)
    ## do.call()을 사용해
    ## [ 안에 들어갈 인수 리스트를 먼저 만든다.
    ## 그 이후 각 이름에 따른 부분 배열을 만들 것이다.
    dcargs <- list(tblarray)
    ndims <- length(subnames)  # 차원 수
    for (i in 1:ndims) {
        dcargs[[i+1]] <- subnames[[i]]
    }
    subarray <- do.call("[",dcargs)
    ## 부분 배열로 이뤄진 새 테이블을 만든다.
    ## 각 차원은 레벨 수로 하고 dimnames() 값을 부여한 후
    ## "table" 클래스를 명시한다.
    dims <- lapply(subnames,length)
    subtbl <- array(subarray,dims,dimnames=subnames)
    class(subtbl) <- "table"
    return(subtbl)
}
subtable(cttab,list(Vote.for.X=c("No","Yes"),
                    Vote.for.X.Last.Time=c("No","Yes")))
tabdom(tbl,k)
d <- c(5,12,13,4,3,28,12,12,9,5,5,13,5,4,12)
dtab <- table(d)
dtab
tabdom(dtab,3)
tabdom(cttab,2)
as.data.frame(cttab)
## tbl 테이블에서 k개의 최고 빈도 셀을 찾는다.
## 수가 같은 경우는 따로 처리하지 않았다.
tabdom <- function(tbl,k) {
    ## Freq 열을 추가해 tbl을 나타내는 데이터 프레임을 생성한다.
    tbldf <- as.data.frame(tbl)
    ## 빈도 순으로 정렬해 보다 명확한 위치를 판단할 수 있게 한다.
    freqord <- order(tbldf$Freq,decreasing=TRUE)
    ## 이 순서대로 데이터 프레임을 재배열한 후 위의 k 행을 가져온다.
    dom <- tbldf[freqord,][1:k,]
    return(dom)
}
tabdom(dtab,3)
tabdom(cttab,2)
aggregate(aba[,-1],list(aba$Gender),median)
z
setwd('../ch07')
getwd()
x <- c(5,12,13)
for (n in x) print(n^2)
i <- 1
while (i <= 10) i <- i+4
i
i <- 1
repeat { # 위와 유사
    i <- i+4
    if (i > 10) break
}
i
for (fn in c("file1","file2")) print(scan(fn))
u <- matrix(c(1,2,3,1,2,4), 2)
u
u <- matrix(c(1,2,3,1,2,4), 3)
u
u <- matrix(c(1,2,3,1,2,4), 3)
v <- matrix(c(8,12,20,15,10,2), 3)
u
v
for (m in c("u","v")) {
    z <- get(m)
    print(lm(z[,2] ~ z[,1]))
}
x <- 2
y <- if(x == 2) x else x+1
y
x <- 3
y <- if(x == 2) x else x+1
y
x <- c(TRUE, FALSE, TRUE)
y <- c(TRUE, TRUE, FALSE)
x
y
x & y
x[1] && y[1]
if (x[1] && y[1]) print("both TRUE")
if (x & y) print("both TRUE")
1 < 2
(1 < 2) * (3 < 4)
(1 < 2) * (3 < 4) * (5 < 1)
(1 < 2) == TRUE
(1 < 2) == 1
oddcount
oddcount <- function(x) {
    k <- 0 # k에 0을 대입
    for (n in x) {
        if (n %% 2 == 1) k <- k + 1 # %%는 나머지 연산자다.
    }
    return(k)
}
oddcount
g <- function() {
    t <- function(x) return(x^2)
    return(t)
}
g()
g <- function(x) {
    return(x+1)
}
?"{"
formals(g)
body(g)
g
abline
page(abline)
sum
ls()
ls.str()
f1 <- function(a,b) return(a+b)
f2 <- function(a,b) return(a-b)
f <- f1
f(3,2)
f <- f2
f(3,2)
g <- function(h,a,b) h(a,b)
g(f1,3,2)
g(f2,3,2)
g1 <- function(x) return(sin(x))
g2 <- function(x) return(sqrt(x^2+1))
g3 <- function(x) return(2*x-1)
plot(c(0,1),c(-1,1.5)) # 그래프를 그리기 위해 X와 Y의 범위를 잡아줌
for (f in c(g1,g2,g3)) plot(f,0,1,add=T) # 잡아놓은 그래프 위에 플로팅
g <- function(h,a,b) h(a,b)
body(g) <- quote(2*x + 3)
g
w <- 12
f <- function(y) {
    d <- 8
    h <- function() {
        return(d*(w+y))
    }
    return(h())
}
environment(f)
ls()
rm(list=ls(all=TRUE))
w <- 12
f <- function(y) {
    d <- 8
    h <- function() {
        return(d*(w+y))
    }
    return(h())
}
environment(f)
ls()
ls.str()
h <- function() {
    return(d*(w+y))
}
f(2)
f
f <- function(y) {
    d <- 8
    h <- function() {
        return(d*(w+y))
    }
    print(environment(h))
    return(h())
}
f(2)
f <- function(y) {
    d <- 8
    return(h())
}
f(5)
h
f <- function(y) {
    d <- 8
    return(h(d,y))
}
h <- function(dee,yyy) {
    return(dee*(w+yyy))
}
f(2)
f <- function(y,ftn) {
    d <- 8
    print(environment(ftn))
    return(ftn(d,y))
}
h <- function(dee,yyy) {
    return(dee*(w+yyy))
}
w <- 12
f(3,h)
f <- function(y) {
    d <- 8
    return(h(d,y))
}
function(dee,yyy) {
    print(ls())
    print(ls(envir=parent.frame(n=1)))
    return(dee*(w+yyy))
}
f(2)
f <- function(y) {
    d <- 8
    return(h(d,y))
}
h <- function(dee,yyy) {
    print(ls())
    print(ls(envir=parent.frame(n=1)))
    return(dee*(w+yyy))
}
f(2)
w <- 12
f <- function(y) {
    d <- 8
    w <- w + 1
    y <- y - 2
    print(w)
    h <- function() {
        return(d*(w+y))
    }
    return(h())
}
t <- 4
f(t)
w
t
f <- function() {
    a <- 1
    return(g(a)+a)
}
g <- function(aa) {
    b <- 2
    aab <- h(aa+b)
    return(aab)
}
h <- function(aaa) {
    c <- 3
    return(aaa+c)
}
showframe <- function(upn) {
    ## 필요한 환경변수를 찾는다.
    if (upn < 0) {
        env <- .GlobalEnv
    } else {
        env <- parent.frame(n=upn+1)
    }
    ## 변수명의 리스트를 얻는다.
    vars <- ls(envir=env)
    ## 각 변수명별로 값을 출력한다.
    for (vr in vars) {
        vrg <- get(vr,envir=env)
        if (!is.function(vrg)) {
            cat(vr,":\n",sep="")
            print(vrg)
        }
    }
}
g <- function(aa) {
    b <- 2
    showframe(0)
    showframe(1)
    aab <- h(aa+h)
    return(aab)
}
g
g()
f()
m <- rbind(1:3,20:22)
m
get("m")
vrg <- get(vr,envir=env)
x <- c(13,5,12)
sort(x)
x
x <- sort(x)
x
two <- function(u) {
    u <<- 2*u
    z <- 2*z
}
x <- 1
z <- 3
u
two(x)
x
z
u
f <- function() {
    inc <- function() { x <<- x + 1 }
    x <- 3
    inc()
    return(x)
}
f()
x
two <- function(u) {
    assign("u",2*u,pos=.GlobalEnv)
    z <- 2*z
}
two(x)
x
u
makecorpdfs <- function(corplist) {
    for (i in 1:(length(corplist)/2)) {
        corp <- corplist[2*i-1]
        newdtf <- paste(corplist[2*i],"2006",sep="")
        assign(newdtf,makecorp(corp),pos=.GlobalEnv)
    }
}
makecorpdfs(c("MICROSOFT CORPORATION", "ms", "INTEL CORPORATION", "intel",
              "SUN MICROSYSTEMS, INC", "sun", "GOOGLE INC.", "google"))
q()
